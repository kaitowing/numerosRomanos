/*
 * This source file was generated by the Gradle 'init' task
 */
package numerosromanos;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;

class RomanNumeralsTest {

    private RomanNumerals converter = new RomanNumerals();

    @Test
    @DisplayName("")
    void acceptanceTest() {
        assertEquals("I", converter.toRoman(1), "1 should be converted to I");
        assertEquals("III", converter.toRoman(3), "3 should be converted to III");
        assertEquals("IV", converter.toRoman(4), "4 should be converted to IV");
        assertEquals("V", converter.toRoman(5), "5 should be converted to V");
        assertEquals("VIII", converter.toRoman(8), "8 should be converted to VIII");
        assertEquals("IX", converter.toRoman(9), "9 should be converted to IX");
        assertEquals("X", converter.toRoman(10), "10 should be converted to X");
        assertEquals("XL", converter.toRoman(40), "40 should be converted to XL");
        assertEquals("L", converter.toRoman(50), "50 should be converted to L");
        assertEquals("XC", converter.toRoman(90), "90 should be converted to XC");
        assertEquals("C", converter.toRoman(100), "100 should be converted to C");
        assertEquals("CD", converter.toRoman(400), "400 should be converted to CD");
        assertEquals("D", converter.toRoman(500), "500 should be converted to D");
        assertEquals("CM", converter.toRoman(900), "900 should be converted to CM");
        assertEquals("M", converter.toRoman(1000), "1000 should be converted to M");
        assertEquals("MMMCMXCIX", converter.toRoman(3999), "3999 should be converted to MMMCMXCIX");

        assertEquals("XIV", converter.toRoman(14), "14 should be converted to XIV");
        assertEquals("XXIX", converter.toRoman(29), "29 should be converted to XXIX");
        assertEquals("XLVIII", converter.toRoman(48), "48 should be converted to XLVIII");
        assertEquals("LX", converter.toRoman(60), "60 should be converted to LX");
        assertEquals("XCIV", converter.toRoman(94), "94 should be converted to XCIV");
        assertEquals("CCXLV", converter.toRoman(245), "245 should be converted to CCXLV");
        assertEquals("DCCCXC", converter.toRoman(890), "890 should be converted to DCCCXC");
        assertEquals("MCMLXXXVII", converter.toRoman(1987), "1987 should be converted to MCMLXXXVII");

        assertEquals("I", converter.toRoman(1), "Lower boundary test: 1 should be I");
        assertEquals("MMMCMXCIX", converter.toRoman(3999), "Upper boundary test: 3999 should be MMMCMXCIX");

        assertThrows(IllegalArgumentException.class, () -> converter.toRoman(0),
                "0 is out of range and should throw an exception");
        assertThrows(IllegalArgumentException.class, () -> converter.toRoman(-1),
                "Negative numbers are invalid and should throw an exception");
        assertThrows(IllegalArgumentException.class, () -> converter.toRoman(4000),
                "4000 is out of range and should throw an exception");
        assertThrows(IllegalArgumentException.class, () -> converter.toRoman(Integer.MAX_VALUE),
                "Integer.MAX_VALUE is out of range and should throw an exception");
        assertThrows(IllegalArgumentException.class, () -> converter.toRoman(Integer.MIN_VALUE),
                "Integer.MIN_VALUE is out of range and should throw an exception");
    }

    @Test
    @DisplayName("Should convert 1 to I")
    void shouldConvertOnetoI() {
        assertEquals("I", converter.toRoman(1));
    }

    @Test
    @DisplayName("Should convert 3 to III")
    void shouldConvertThreetoIII() {
        assertEquals("III", converter.toRoman(3));
    }

    @Test
    @DisplayName("Should convert 4 to IV")
    void shouldConvertFourtoIV() {
        assertEquals("IV", converter.toRoman(4));
    }

    @Test
    @DisplayName("Should convert 5 to V")
    void shouldConvertFivetoV() {
        assertEquals("V", converter.toRoman(5));
    }

    @Test
    @DisplayName("Should convert 8 to VIII")
    void shouldConvertEighttoVIII() {
        assertEquals("VIII", converter.toRoman(8));
    }

    @Test
    @DisplayName("Should convert 9 to IX")
    void shouldConvertNinetoIX() {
        assertEquals("IX", converter.toRoman(9));
    }

    @Test
    @DisplayName("Should convert 10 to X")
    void shouldConvertTentoX() {
        assertEquals("X", converter.toRoman(10));
    }

    @Test
    @DisplayName("Should convert 40 to XL")
    void shouldConvertFortytoXL() {
        assertEquals("XL", converter.toRoman(40));
    }

    @Test
    @DisplayName("Should convert 43 to XLIII")
    void shouldConvertFortyThreetoXLIII() {
        assertEquals("XLIII", converter.toRoman(43));
    }

    @Test
    @DisplayName("Should convert 50 to L")
    void shouldConvertFiftytoL() {
        assertEquals("L", converter.toRoman(50));
    }

    @Test
    @DisplayName("Should convert 70 to LXX")
    void shouldConvertSeventytoLXX() {
        assertEquals("LXX", converter.toRoman(70));
    }

    @Test
    @DisplayName("Should convert 90 to XC")
    void shouldConvertNinetytoXC() {
        assertEquals("XC", converter.toRoman(90));
    }

    @Test
    @DisplayName("Should convert 100 to C")
    void shouldConvertHundredtoC() {
        assertEquals("C", converter.toRoman(100));
    }

    @Test
    @DisplayName("Should convert 337 to CCCXXXVII")
    void shouldConvertFourHundredtoCCCXXXVII() {
        assertEquals("CCCXXXVII", converter.toRoman(337));
    }

    @Test
    @DisplayName("Should convert 400 to CD")
    void shouldConvertFourHundredtoCD() {
        assertEquals("CD", converter.toRoman(400));
    }

    @Test
    @DisplayName("Should convert 500 to D")
    void shouldConvertFiveHundredtoD() {
        assertEquals("D", converter.toRoman(500));
    }

    @Test
    @DisplayName("Should convert 900 to CM")
    void shouldConvertNineHundredtoCM() {
        assertEquals("CM", converter.toRoman(900));
    }

    @Test
    @DisplayName("Should convert 1000 to M")
    void shouldConvertThousandtoM() {
        assertEquals("M", converter.toRoman(1000));
    }

    @Test
    @DisplayName("Should convert 586 to DLXXXVI")
    void shouldConvertThousandto() {
        assertEquals("DLXXXVI", converter.toRoman(586));
    }
    
    @Test
    @DisplayName("Should convert 1987 to MCMLXXXVII")
    void shouldConvertOneThousandNineHundredEightyseventoMCMLXXXVII() {
        assertEquals("MCMLXXXVII", converter.toRoman(1987));
    }

    @Test
    @DisplayName("Should convert 3999 to MMMCMXCIX")
    void shouldConvertThreeThousandNineHundredNinetyninetoMMMCMXCIX() {
        assertEquals("MMMCMXCIX", converter.toRoman(3999));
    }

    @Test
    @DisplayName("Should throw exception for 0")
    void shouldThrowExceptionForZero() {
        assertThrows(IllegalArgumentException.class, () -> converter.toRoman(0));
    }

}
